diff --git a/conf/memconf/main.c b/conf/memconf/main.c
index 0eec41d4..3db7f5eb 100644
--- a/conf/memconf/main.c
+++ b/conf/memconf/main.c
@@ -66,17 +66,20 @@ main (gint argc, gchar **argv)
     GError *error = NULL;
     GOptionContext *context;
 
+    g_warning ("test ibus-memconf:main");
     setlocale (LC_ALL, "");
 
     context = g_option_context_new ("- ibus memconf component");
 
     g_option_context_add_main_entries (context, entries, "ibus-memconf");
 
+    g_warning ("test2 ibus-memconf:main");
     if (!g_option_context_parse (context, &argc, &argv, &error)) {
         g_print ("Option parsing failed: %s\n", error->message);
         exit (-1);
     }
 
+    g_warning ("test3 ibus-memconf:main");
     ibus_memconf_start ();
 
     return 0;
diff --git a/src/tests/Makefile.am b/src/tests/Makefile.am
index ca5285bd..f0a7f6d7 100644
--- a/src/tests/Makefile.am
+++ b/src/tests/Makefile.am
@@ -89,7 +89,7 @@ TESTS_ENVIRONMENT = \
     DISABLE_DAEMONIZE_IN_TESTS="$(DISABLE_DAEMONIZE_IN_TESTS)" \
     $(NULL)
 
-LOG_COMPILER = $(srcdir)/runtest
+LOG_COMPILER = bash -x $(srcdir)/runtest
 test_metas_in = meta.test.in
 
 if ENABLE_INSTALL_TESTS
diff --git a/src/tests/ibus-bus.c b/src/tests/ibus-bus.c
index a2af0bb2..08bf021a 100644
--- a/src/tests/ibus-bus.c
+++ b/src/tests/ibus-bus.c
@@ -1,6 +1,7 @@
 /* -*- mode: C; c-basic-offset: 4; indent-tabs-mode: nil; -*- */
 
 #include <string.h>
+#include <stdio.h>
 #include "ibus.h"
 
 static IBusBus *bus;
@@ -41,6 +42,7 @@ test_list_engines (void)
     GList *engines;
     IBUS_TYPE_ENGINE_DESC;
 
+    fprintf (stderr, "test test_list_engines %s\n", ibus_bus_is_connected (bus) ? "TRUE" : "FALSE");
     engines = ibus_bus_list_engines (bus);
     print_engines (engines);
 
@@ -802,6 +804,32 @@ start_set_preload_engines_async (void)
             NULL); /* user_data */
 }
 
+static void
+_changed_cb (GFileMonitor       *monitor,
+             GFile              *file,
+             GFile              *other_file,
+             GFileMonitorEvent   event_type,
+             IBusBus            *bus)
+{
+    switch (event_type) {
+    case G_FILE_MONITOR_EVENT_CHANGED:
+        fprintf (stderr, "socket file is changed\n");
+        //g_usleep (G_USEC_PER_SEC);
+        //call_next_async_function ();
+        break;
+    case G_FILE_MONITOR_EVENT_CREATED:
+        fprintf (stderr, "socket file is created\n");
+        break;
+    case G_FILE_MONITOR_EVENT_DELETED:
+        fprintf (stderr, "socket file is deleted\n");
+        break;
+    default:
+        fprintf (stderr, "socket file is %d\n", event_type);
+        g_warning ("socket file is %d", event_type);
+        g_assert (event_type == G_FILE_MONITOR_EVENT_CREATED);
+    }
+}
+
 static void
 finish_exit_async (GObject *source_object,
                    GAsyncResult *res,
@@ -811,15 +839,25 @@ finish_exit_async (GObject *source_object,
     gboolean result = ibus_bus_exit_async_finish (bus,
                                                   res,
                                                   &error);
+    gboolean has_socket_path = GPOINTER_TO_INT (user_data);
+    if (error) {
+        g_warning ("Failed to ibus_bus_exit(): %s", error->message);
+        g_error_free (error);
+    }
     g_assert (result);
-    g_debug ("ibus_bus_exit_finish: OK");
-    g_usleep (G_USEC_PER_SEC);
-    call_next_async_function ();
+    if (has_socket_path == FALSE) {
+        g_debug ("ibus_bus_exit_finish: OK socket: NO");
+        g_usleep (G_USEC_PER_SEC);
+        call_next_async_function ();
+    } else {
+        g_debug ("ibus_bus_exit_finish: OK socket: YES");
+    }
 }
 
 static void
 start_exit_async (void)
 {
+    gboolean has_socket_path = FALSE;
     /* When `./runtest ibus-bus` runs, ibus-daemon sometimes failed to
      * restart because closing a file descriptor was failed in
      * bus/server.c:_restart_server() with a following error:
@@ -827,18 +865,42 @@ start_exit_async (void)
      * Now g_usleep() is added here to write down the buffer and not to
      * fail to restart ibus-daemon.
      */
+    //if (system ("/usr/bin/ps -ef | /usr/bin/grep ibus"))
+    if (system ("/usr/bin/ls -al --full-time"))
+        fprintf (stderr, "test start_exit_async something error\n");
+    fprintf (stderr, "test start_exit_async %s\n", ibus_get_address ());
     g_usleep (G_USEC_PER_SEC);
+    const gchar *address_path = ibus_get_socket_path ();
+    if (!g_getenv ("IBUS_ADDRESS")) {
+        g_assert (address_path);
+        GFile *file = g_file_new_for_path (address_path);
+        GError *error = NULL;
+        g_assert (file);
+        //has_socket_path = TRUE;
+        GFileMonitor *monitor = g_file_monitor (file,
+                                                G_FILE_MONITOR_NONE,
+                                                NULL,
+                                                &error);
+        if (error) {
+            g_warning ("Failed to monitor socket file: %s", error->message);
+            g_error_free (error);
+        }
+        g_assert (monitor);
+        g_signal_connect (monitor, "changed", (GCallback)_changed_cb, NULL);
+        g_object_unref (file);
+    }
     ibus_bus_exit_async (bus,
                          TRUE, /* restart */
                          -1, /* timeout */
                          NULL, /* cancellable */
                          finish_exit_async,
-                         NULL); /* user_data */
+                         GINT_TO_POINTER (has_socket_path)); /* user_data */
 }
 
 static gboolean
 test_async_apis_finish (gpointer user_data)
 {
+    g_debug ("test test_async_apis_finish");
     /* INFO: g_warning() causes SEGV with runtest script */
     if (ibus_get_address () == NULL)
         g_warning ("ibus-daemon does not restart yet from start_exit_async().");
@@ -920,9 +982,10 @@ call_next_async_function (void)
     /* Use g_timeout_add to make sure test_async_apis finishes even if
      * async_functions is empty.
      */
-    if (index >= G_N_ELEMENTS (async_functions))
+    if (index >= G_N_ELEMENTS (async_functions)) {
+        g_debug ("test call_next_async_function");
         g_timeout_add (1, test_async_apis_finish, NULL);
-    else
+    } else
         (*async_functions[index++])();
 }
 
@@ -930,17 +993,30 @@ static void
 _bus_connected_cb (IBusBus *bus,
                    gpointer user_data)
 {
+    fprintf (stderr, "test _bus_connected_cb %s\n", ibus_bus_is_connected (bus) ? "TRUE" : "FALSE");
     g_assert (ibus_bus_is_connected (bus));
     ibus_quit ();
+    fprintf (stderr, "test _bus_connected_cb\n");
 }
 
 static void
 test_bus_new_async (void)
 {
+    int count = 0;
     g_object_unref (bus);
-    bus = ibus_bus_new_async ();
-    g_signal_connect (bus, "connected", G_CALLBACK (_bus_connected_cb), NULL);
+    fprintf (stderr, "test2 test_bus_new_async\n");
+    //if (system ("/usr/bin/ps -ef | /usr/bin/grep ibus"))
+    if (system ("/usr/bin/ls -al --full-time"))
+        fprintf (stderr, "test test_bus_new_async something error\n");
+    //bus = ibus_bus_new_async ();
+    //g_signal_connect (bus, "connected", G_CALLBACK (_bus_connected_cb), NULL);
+    fprintf (stderr, "test3 test_bus_new_async %s %p\n", ibus_get_address (), bus);
+    while (count < 1000000) {
+        fprintf (stderr, "test test_bus_new_async %d\n", count++);
+        g_usleep (G_USEC_PER_SEC);
+    }
     ibus_main ();
+    fprintf (stderr, "test4 test_bus_new_async\n");
 }
 
 gint
diff --git a/src/tests/runtest b/src/tests/runtest
index 036dc771..0b1b8f9e 100755
--- a/src/tests/runtest
+++ b/src/tests/runtest
@@ -24,6 +24,7 @@
 : ${DISABLE_GUI_TESTS:=''}
 : ${DISABLE_DAEMONIZE_IN_TESTS:=''}
 
+pwd
 BUS_REQUIRED_TESTS="
 ibus-bus
 ibus-config
@@ -135,6 +136,17 @@ run_test_case()
         func_copy_component "../$top_srcdir/engine/simple.xml"
         func_copy_component "../$top_srcdir/conf/memconf/memconf.xml"
 
+        #sed -i -e 's|ibus-memconf|.libs/ibus-memconf|' components/memconf.xml
+        cat components/memconf.xml
+        #(cd ../../../; pwd)
+        ls -l ../../../conf/memconf
+        file ../../../conf/memconf/ibus-memconf
+        sed -i '/\/bin\/bash/a\
+set -x -v' ../../../conf/memconf/ibus-memconf
+        ls -l ../../../conf/memconf
+        head ../../../conf/memconf/ibus-memconf
+        #bash -x ../../../conf/memconf/ibus-memconf
+
         IBUS_COMPONENT_PATH=$PWD/components
         export IBUS_COMPONENT_PATH
 
@@ -187,6 +199,10 @@ run_test_case()
         # Wait until all necessary components are up.
         sleep 3
 
+        #ps -ef | grep ibus
+        #env LD_LIBRARY_PATH=/__w/test-fjw/test-fjw/ibus-1.5.27/_build/sub/src/.libs:../../src/.libs:../../src \
+        #strace ../../../conf/memconf/.libs/ibus-memconf
+
         export GTK_IM_MODULE=ibus
     fi
 
